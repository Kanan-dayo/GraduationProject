//*************************************************************************************************************
//
// 絵用のペン処理[PaintingPen.cpp]
// Author:IKUTO SEKINE
//
//*************************************************************************************************************
//-------------------------------------------------------------------------------------------------------------
// インクルードファイル
//-------------------------------------------------------------------------------------------------------------
#include "PaintingPen.h"
#include "manager.h"
#include "renderer.h"
#include "mouse.h"
#include "camera.h"

//-------------------------------------------------------------------------------------------------------------
// マクロ定義
//-------------------------------------------------------------------------------------------------------------
#define PAINTINGPEN_SIZE 1.5f						// 初期のペンの太さ

//-------------------------------------------------------------------------------------------------------------
// 静的メンバ変数の初期化
//-------------------------------------------------------------------------------------------------------------
float CPaintingPen::m_aSetingRadius[CPaintingPen::MODE_MAX] = Mybfunc_array(0.0f);	// 設定用半径

//-------------------------------------------------------------------------------------------------------------
// 読み込み
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Load(void)
{
}

//-------------------------------------------------------------------------------------------------------------
// エラーの検出
//-------------------------------------------------------------------------------------------------------------
HRESULT CPaintingPen::LoadError(void)
{
	for (int nCntMode = 0; nCntMode < CPaintingPen::MODE_MAX; nCntMode++)
	{
		if (m_aSetingRadius[nCntMode] <= MYLIB_OX_EPSILON)
		{
#ifdef _DEBUG
			Mybfunc_Debug_error("ペンの大きさが小さすぎます。");
#endif
			return E_FAIL;
		}
	}
	return S_OK;
}

//-------------------------------------------------------------------------------------------------------------
// 初期化
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Init(void)
{
	// カメラの取得
	CCamera *pCamera = CManager::GetRenderer()->GetCamera();
	m_pMtxView       = pCamera->GetMtxView();
	m_pMtxProj       = pCamera->GetMtxProjection();
	m_bPaint         = false;
	m_mode           = MODE_NONE;
	m_pos            = MYLIB_VEC2_UNSET;
	m_posOld         = MYLIB_VEC2_UNSET;
	m_Capsule        = CAPSULE_2D(SEGMENT_2D(MYLIB_VEC2_UNSET, MYLIB_VEC2_UNSET), PAINTINGPEN_SIZE);
}

//-------------------------------------------------------------------------------------------------------------
// 終了
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Uninit(void)
{
	m_pMtxView = nullptr;
	m_pMtxProj = nullptr;
	m_bPaint   = false;
	m_mode     = MODE_NONE;
	m_pos      = MYLIB_VEC2_UNSET;
	m_posOld   = MYLIB_VEC2_UNSET;
	m_Capsule  = CAPSULE_2D(SEGMENT_2D(MYLIB_VEC2_UNSET, MYLIB_VEC2_UNSET), PAINTINGPEN_SIZE);
}

//-------------------------------------------------------------------------------------------------------------
// 更新
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Update(void)
{
}

//-------------------------------------------------------------------------------------------------------------
// 色を塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintCol(D3DXCOLOR * pCol)
{
	// モード別処理
	switch (m_mode)
	{
		MLB_CASE(MODE_BRUSH) PaintBrush(pCol);	// ブラシで塗る
		MLB_CASE(MODE_ERASER)PaintEraser(pCol);	// 消しゴムで塗る
		MLB_CASEEND;							// ケース終了
	}
}

//-------------------------------------------------------------------------------------------------------------
// 絵上の位置の取得
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PosCalculation(D3DXVECTOR3 *pPos, D3DXVECTOR3 *pPlaneNor)
{
	// 変数宣言
	CManager::RAY *pRay = CManager::GetRay();	// レイ
	D3DXVECTOR3    CrossPos;					// 交差位置
	// 平面との交差位置を計算
	CMylibrary::CalIntersectionPointToPlaneAndLine(&CrossPos, pPos, pPlaneNor, &pRay->NearPos, &pRay->vec);
	m_pos.x = CrossPos.x;
	m_pos.y = CrossPos.y;
}

//-------------------------------------------------------------------------------------------------------------
// 生成
//-------------------------------------------------------------------------------------------------------------
CPaintingPen * CPaintingPen::Create(void)
{
	CPaintingPen *pPen = new CPaintingPen;
	pPen->Init();
	return pPen;
}

//-------------------------------------------------------------------------------------------------------------
// 文字列から設定する
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::SetFromString(CONST_STRING str)
{
	// 変数宣言
	float fData = MYLIB_FLOAT_UNSET;
	// ブラシサイズ
	if (sscanf(str, "PenSize = %f", &fData) == 1)
	{
		m_aSetingRadius[CPaintingPen::MODE_BRUSH] = fData;
	}
	// 消しゴムサイズ
	else if (sscanf(str, "EraserSize = %f", &fData) == 1)
	{
		m_aSetingRadius[CPaintingPen::MODE_ERASER] = fData;
	}
}

//-------------------------------------------------------------------------------------------------------------
// カプセルの設定
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::SetCapsule(void)
{
	m_Capsule             = m_pos;						// 位置
	m_Capsule             = VEC2(m_posOld - m_pos);		// ベクトル
}

//-------------------------------------------------------------------------------------------------------------
// モードの設定
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::SetMode(MODE mode)
{
	// モードを代入
	m_mode = mode;
	// カーソルタイプを設定
	CManager::GetMouse()->SetCursorType((CMouse::CURTYPE)CPaintingPen::ConvModeToCursorType(m_mode));
	// 半径の設定
	SetRadius(m_aSetingRadius[mode]);

}

//-------------------------------------------------------------------------------------------------------------
// ペンのモードからカーソルタイプに変換
//-------------------------------------------------------------------------------------------------------------
int CPaintingPen::ConvModeToCursorType(MODE& mode)
{
	switch (mode)
	{
		MLB_CASE(MODE_BRUSH)  return CMouse::CUR_PEN;		// ペンタイプ
		MLB_CASE(MODE_ERASER) return CMouse::CUR_ERASER;	// 消しゴム
		MLB_DEFAULT           return CMouse::CUR_NONE;		// 無し
	}
}

//-------------------------------------------------------------------------------------------------------------
// ブラシで塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintBrush(D3DXCOLOR * pCol)
{
	pCol->r = 0.0f;
	pCol->g = 0.0f;
	pCol->b = 0.0f;
}

//-------------------------------------------------------------------------------------------------------------
// 消しゴムで塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintEraser(D3DXCOLOR * pCol)
{
	pCol->r = 1.0f;
	pCol->g = 1.0f;
	pCol->b = 1.0f;
}
