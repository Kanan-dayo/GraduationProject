//*************************************************************************************************************
//
// 絵用のペン処理[PaintingPen.cpp]
// Author:IKUTO SEKINE
//
//*************************************************************************************************************
//-------------------------------------------------------------------------------------------------------------
// インクルードファイル
//-------------------------------------------------------------------------------------------------------------
#include "PaintingPen.h"
#include "manager.h"
#include "renderer.h"
#include "mouse.h"
#include "camera.h"

//-------------------------------------------------------------------------------------------------------------
// マクロ定義
//-------------------------------------------------------------------------------------------------------------
#define PAINTINGPEN_SIZE 3.0f						// 初期のペンの太さ

//-------------------------------------------------------------------------------------------------------------
// 静的メンバ変数の初期化
//-------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------
// 初期化
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Init(void)
{
	// カメラの取得
	CCamera *pCamera = CManager::GetRenderer()->GetCamera();
	m_pMtxView = pCamera->GetMtxView();
	m_pMtxProj = pCamera->GetMtxProjection();
	m_bPaint    = false;
	m_mode      = MODE_BRUSH;
	m_pos       = MYLIB_VEC2_UNSET;
	m_posOld    = MYLIB_VEC2_UNSET;
	m_Capsule = CAPSULE_2D(SEGMENT_2D(MYLIB_VEC2_UNSET, MYLIB_VEC2_UNSET), PAINTINGPEN_SIZE);
}

//-------------------------------------------------------------------------------------------------------------
// 終了
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Uninit(void)
{
	m_pMtxView = nullptr;
	m_pMtxProj = nullptr;
	m_bPaint   = false;
	m_mode     = MODE_BRUSH;
	m_pos      = MYLIB_VEC2_UNSET;
	m_posOld   = MYLIB_VEC2_UNSET;
	m_Capsule  = CAPSULE_2D(SEGMENT_2D(MYLIB_VEC2_UNSET, MYLIB_VEC2_UNSET), PAINTINGPEN_SIZE);
}

//-------------------------------------------------------------------------------------------------------------
// 更新
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::Update(void)
{
	CMouse *pMouse = CManager::GetMouse();

	if (pMouse->GetTrigger(1))
	{
		if (m_mode != MODE_BRUSH)
		{
			m_mode = MODE_BRUSH;
		}
		else
		{
			m_mode = MODE_ERASER;
		}
	}
}

//-------------------------------------------------------------------------------------------------------------
// 色を塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintCol(D3DXCOLOR * pCol)
{
	switch (m_mode)
	{
		MLB_CASE(MODE_BRUSH) PaintBrush(pCol);	// ブラシで塗る
		MLB_CASE(MODE_ERASER)PaintEraser(pCol);	// 消しゴムで塗る
		MLB_CASEEND;
	}
}

//-------------------------------------------------------------------------------------------------------------
// 絵上の位置の取得
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PosCalculation(D3DXVECTOR3 *pPos, D3DXVECTOR3 *pPlaneNor)
{
	CManager::RAY *pRay = CManager::GetRay();
	D3DXVECTOR3 CrossPos;
	// 平面との交差位置を計算
	CMylibrary::CalIntersectionPointToPlaneAndLine(&CrossPos, pPos, pPlaneNor, &pRay->NearPos, &pRay->vec);
	m_pos.x = CrossPos.x;
	m_pos.y = CrossPos.y;
}

//-------------------------------------------------------------------------------------------------------------
// 生成
//-------------------------------------------------------------------------------------------------------------
CPaintingPen * CPaintingPen::Create(void)
{
	CPaintingPen *pPen = new CPaintingPen;
	pPen->Init();
	return pPen;
}

//-------------------------------------------------------------------------------------------------------------
// カプセルの設定
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::SetCapsule(void)
{
	m_Capsule.Segment.pos = m_pos;
	m_Capsule.Segment.vec = m_posOld - m_pos;
}

//-------------------------------------------------------------------------------------------------------------
// ブラシで塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintBrush(D3DXCOLOR * pCol)
{
	pCol->r = 0.0f;
	pCol->g = 0.0f;
	pCol->b = 0.0f;
}

//-------------------------------------------------------------------------------------------------------------
// 消しゴムで塗る
//-------------------------------------------------------------------------------------------------------------
void CPaintingPen::PaintEraser(D3DXCOLOR * pCol)
{
	pCol->r = 1.0f;
	pCol->g = 1.0f;
	pCol->b = 1.0f;
}
